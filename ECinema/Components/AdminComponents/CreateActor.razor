@inject HttpClient Http
@rendermode InteractiveServer

<MudPopoverProvider />
<MudCard Style="max-width: 600px;">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Create New Actor</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField ShrinkLabel @bind-Value="actorName" Label="Actor Name" Variant="Variant.Filled" />
        <MudTextField ShrinkLabel @bind-Value="bio" Label="Bio" Variant="Variant.Filled"/>
        <MudDatePicker @bind-Date="dateOfBirth" Label="Date of Birth" />

        <MudButton OnClick="CreateActorHandler" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
            Create Actor
        </MudButton>
        @if (!string.IsNullOrEmpty(ResponseMessage))
        {
            <MudText Color="Color.Primary">@ResponseMessage</MudText>
        }
    </MudCardContent>
</MudCard>


@code {
    private string actorName = string.Empty;
    private string bio = string.Empty;
    private DateTime? dateOfBirth = null;
    private string ResponseMessage;
    private async Task CreateActorHandler()
    {
        try
        {
            var newActor = new
            {
                ActorName = actorName,
                Bio = bio,
                DateOfBirth = dateOfBirth
            };

            var response = await Http.PostAsJsonAsync("api/actor", newActor);

            if (response.IsSuccessStatusCode)
            {
                ResponseMessage = "Actor created successfully.";
                actorName = string.Empty;
                bio = string.Empty;
                dateOfBirth = null;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ResponseMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {

        }
    }
}
